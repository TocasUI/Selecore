// Generated by CoffeeScript 2.0.0-beta2
var $_;

$_ = function(selector, context) {
  var nodes, ref, tag;
  nodes = [];
  if (typeof selector === 'string' && selector[0] === '<') {
    tag = selector.match(/<(.*)\/>|<(.*)>/);
    nodes = [document.createElement((ref = tag[1]) != null ? ref : tag[2])];
  } else if (typeof selector === 'string' && context === void 0) {
    nodes = document.querySelectorAll(selector);
  } else if (typeof selector === 'string' && typeof context === 'string') {
    nodes = $_(selector).find(context).toArray();
  } else if (selector instanceof NodeList) {
    selector.forEach(function(element) {
      return nodes.push(element);
    });
  } else if (Array.isArray(selector) || (selector != null ? selector.isSelector : void 0) === true) {
    nodes = nodes.concat(selector);
  } else if (selector instanceof HTMLElement) {
    nodes = [selector];
  }
  nodes.selector = typeof selector === 'string' ? selector : null;
  nodes.context = typeof context === 'string' ? context : null;
  nodes.__proto__ = Object.assign(nodes.__proto__, $_.fn);
  nodes.__proto__.isSelector = true;
  return nodes;
};

$_.fn = {
  get: function(index = 0) {
    return this[index];
  },
  toArray: function() {
    var array;
    array = [];
    this.forEach(function(element) {
      return array.push(element);
    });
    return array;
  },
  each: function(callback) {
    this.forEach(function(element, index) {
      return callback.call(element, element, index);
    });
    return this;
  },
  collectSwap: function(callback) {
    var collection;
    collection = [];
    this.each(function(element, index) {
      var result;
      result = callback.call(element, element, index);
      if (result === void 0 || result === null) {
        return;
      }
      if (result instanceof NodeList) {
        return result.forEach(function(el) {
          return collection.push(el);
        });
      } else if (Array.isArray(result)) {
        return collection = collection.concat(result);
      } else {
        if (collection.indexOf(result) === -1) {
          return collection.push(result);
        }
      }
    });
    return $_(collection);
  },
  eq: function(index) {
    return $_(this.get(index));
  },
  parent: function() {
    return this.collectSwap(function() {
      return this.parentNode;
    });
  },
  closest: function(selector) {
    return this.collectSwap(function() {
      return this.closest(selector);
    });
  },
  find: function(selector) {
    return this.collectSwap(function() {
      return this.querySelectorAll(selector);
    });
  },
  append: function(element) {
    return this.each(function() {
      return this.appendChild(element);
    });
  },
  appendTo: function(selector) {
    return this.each(function() {
      return $_(selector).append(this);
    });
  },
  prepend: function(element) {
    return this.each(function() {
      if (this.parentNode !== null) {
        return this.parentNode.insertBefore(element, this.parentNode.firstChild);
      }
    });
  },
  prependTo: function(selector) {
    return this.each(function() {
      return $_(selector).prepend(this);
    });
  },
  remove: function() {
    return this.each(function() {
      var ref;
      return (ref = this.parentNode) != null ? ref.removeChild(element) : void 0;
    });
  },
  is: function(selector) {
    var compareElements, isInElements;
    compareElements = document.querySelectorAll(selector);
    isInElements = false;
    this.each(function(element) {
      return compareElements.forEach(function(compareElement) {
        if (element === compareElement) {
          return isInElements = true;
        }
      });
    });
    return isInElements;
  },
  attr: function(name, value) {
    var ref;
    if (value !== void 0) {
      return this.each(function() {
        return this.setAttribute(name, value);
      });
    } else {
      return (ref = this.get()) != null ? ref.getAttribute(name) : void 0;
    }
  },
  removeAttr: function(name) {
    return this.each(function() {
      return this.removeAttribute(name);
    });
  },
  addClass: function(name) {
    return this.each(function() {
      return DOMTokenList.prototype.add.apply(this.classList, name.split(' '));
    });
  },
  removeClass: function(name) {
    return this.each(function() {
      return DOMTokenList.prototype.remove.apply(this.classList, name.split(' '));
    });
  },
  hasClass: function(name) {
    var ref;
    return (ref = this.get(0)) != null ? ref.classList.contains(name) : void 0;
  },
  css: function(name, value) {
    var key;
    if (typeof name === 'string' && value !== void 0) {
      return this.each(function() {
        return this.style[name] = value;
      });
    } else if (typeof name === 'string' && value === void 0) {
      if (this.get() != null) {
        return document.defaultView.getComputedStyle(this.get(), null).getPropertyValue(name);
      } else {
        return null;
      }
    } else if (typeof name === 'object') {
      for (key in name) {
        this.each(function() {
          return this.style[key] = name[key];
        });
      }
      return this;
    }
  },
  on: function(event, handler, options) {},
  one: function(event, handler) {},
  off: function(event, handler) {},
  text: function(text) {
    var ref;
    if (text !== void 0) {
      return this.each(function() {
        return this.innerText = text;
      });
    } else {
      return (ref = this.get()) != null ? ref.innerText : void 0;
    }
  },
  val: function(value) {
    var ref;
    if (value !== void 0) {
      return this.each(function() {
        return this.value = value;
      });
    } else {
      return (ref = this.get()) != null ? ref.value : void 0;
    }
  },
  html: function(html) {
    var ref;
    if (html !== void 0) {
      return this.each(function() {
        return this.innerHTML = html;
      });
    } else {
      return (ref = this.get()) != null ? ref.innerHTML : void 0;
    }
  },
  empty: function() {
    return this.each(function() {
      if (this.value !== void 0) {
        this.value = null;
      }
      if (this.innerHTML !== void 0) {
        this.innerHTML = null;
      }
      if (this.innerText !== void 0) {
        return this.innerText = null;
      }
    });
  },
  prop: function(name, value) {
    var key, ref;
    if (typeof name === 'string' && value !== void 0) {
      return this.each(function() {
        return this[name] = value;
      });
    } else if (typeof name === 'string' && value === void 0) {
      return (ref = this.get()) != null ? ref[name] : void 0;
    } else if (typeof name === 'object') {
      for (key in name) {
        this.each(function() {
          return this[key] = name[key];
        });
      }
      return this;
    }
  },
  data: function(name, value) {
    var key, ref, ref1;
    if (typeof name === 'string' && value !== void 0) {
      return this.each(function() {
        if (this.$data === void 0) {
          this.$data = {};
        }
        return this.$data[name] = value;
      });
    } else if (typeof name === 'string' && value === void 0) {
      return (ref = this.get()) != null ? (ref1 = ref.$data) != null ? ref1[name] : void 0 : void 0;
    } else if (typeof name === 'object') {
      for (key in name) {
        this.each(function() {
          if (this.$data === void 0) {
            this.$data = {};
          }
          return this.$data[key] = name[key];
        });
      }
      return this;
    }
  }
};
