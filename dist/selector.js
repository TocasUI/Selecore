// Generated by CoffeeScript 2.0.0-beta2
var $selector;

$selector = function(selector, context) {
  var nodes, ref, tag;
  nodes = [];
  if (typeof selector === 'string' && selector[0] === '<') {
    tag = selector.match(/<(.*)\/>|<(.*)>/);
    nodes = [document.createElement((ref = tag[1]) != null ? ref : tag[2])];
  } else if (typeof selector === 'string' && context === void 0) {
    nodes = document.querySelectorAll(selector);
  } else if (typeof context === 'string') {
    nodes = $selector(selector).find(context).toArray();
  } else if (selector instanceof NodeList) {
    selector.forEach(function(element) {
      return nodes.push(element);
    });
  } else if (Array.isArray(selector) || (selector != null ? selector.isSelector : void 0) === true) {
    nodes = nodes.concat(selector);
  } else if (selector instanceof HTMLElement) {
    nodes = [selector];
  }
  nodes.selector = typeof selector === 'string' ? selector : null;
  nodes.context = typeof context === 'string' ? context : null;
  nodes.__proto__ = Object.assign(nodes.__proto__, $selector.fn);
  nodes.__proto__.isSelector = true;
  return nodes;
};

$selector.fn = {};

$selector.fn.get = function(index = 0) {
  return this[index];
};

$selector.fn.toArray = function() {
  var array;
  array = [];
  this.forEach(function(element) {
    return array.push(element);
  });
  return array;
};

$selector.fn.each = function(callback) {
  this.forEach(function(element, index) {
    return callback.call(element, element, index);
  });
  return this;
};

$selector.fn.collectSwap = function(callback) {
  var collection;
  collection = [];
  this.each(function(element, index) {
    var result;
    result = callback.call(element, element, index);
    if (result === void 0 || result === null) {
      return;
    }
    if (result instanceof NodeList) {
      return result.forEach(function(el) {
        return collection.push(el);
      });
    } else if (Array.isArray(result)) {
      return collection = collection.concat(result);
    } else {
      if (collection.indexOf(result) === -1) {
        return collection.push(result);
      }
    }
  });
  return $selector(collection);
};

$selector.fn.eq = function(index) {
  return $selector(this.get(index));
};

$selector.fn.parent = function() {
  return this.collectSwap(function() {
    return this.parentNode;
  });
};

$selector.fn.closest = function(selector) {
  return this.collectSwap(function() {
    return this.closest(selector);
  });
};

$selector.fn.find = function(selector) {
  return this.collectSwap(function() {
    return this.querySelectorAll(selector);
  });
};

$selector.fn.wrap = function(element) {
  return this.each(function() {
    if (this.nextSibling) {
      this.parentNode.insertBefore(element, this.nextSibling);
    } else {
      this.parentNode.appendChild(element);
    }
    return element.appendChild(this);
  });
};

$selector.fn.append = function(element) {
  return this.each(function() {
    return this.appendChild(element);
  });
};

$selector.fn.appendTo = function(selector) {
  return this.each(function() {
    return $selector(selector).append(this);
  });
};

$selector.fn.prepend = function(element) {
  return this.each(function() {
    if (this.parentNode !== null) {
      return this.parentNode.insertBefore(element, this.parentNode.firstChild);
    }
  });
};

$selector.fn.prependTo = function(selector) {
  return this.each(function() {
    return $selector(selector).prepend(this);
  });
};

$selector.fn.remove = function() {
  return this.each(function() {
    var ref;
    return (ref = this.parentNode) != null ? ref.removeChild(this) : void 0;
  });
};

$selector.fn.is = function(selector) {
  var compareElements, isInElements;
  compareElements = document.querySelectorAll(selector);
  isInElements = false;
  this.each(function() {
    return compareElements.forEach(function(compareElement) {
      if (this === compareElement) {
        return isInElements = true;
      }
    }, this);
  });
  return isInElements;
};

$selector.fn.next = function() {
  if (this.get(0) != null) {
    return $selector(this.get(0).nextElementSibling);
  } else {
    return $selector();
  }
};

$selector.fn.prev = function() {
  if (this.get(0) != null) {
    return $selector(this.get(0).previousElementSibling);
  } else {
    return $selector();
  }
};

$selector.fn.index = function() {
  var index, node;
  node = this.get(0);
  index = 0;
  if (node == null) {
    return -1;
  }
  while ((node = node.previousElementSibling)) {
    index++;
  }
  return index;
};

$selector.fn.attr = function(name, value) {
  var ref;
  if (value !== void 0) {
    return this.each(function() {
      return this.setAttribute(name, value);
    });
  } else if (typeof name === 'object') {
    return this.each(function() {
      var key, results;
      results = [];
      for (key in name) {
        results.push(this.setAttribute(key, name[key]));
      }
      return results;
    });
  } else {
    return (ref = this.get()) != null ? ref.getAttribute(name) : void 0;
  }
};

$selector.fn.removeAttr = function(name) {
  return this.each(function() {
    return this.removeAttribute(name);
  });
};

$selector.fn.addClass = function(names) {
  return this.each(function() {
    return DOMTokenList.prototype.add.apply(this.classList, names.split(' '));
  });
};

$selector.fn.removeClass = function(names) {
  return this.each(function() {
    return DOMTokenList.prototype.remove.apply(this.classList, names.split(' '));
  });
};

$selector.fn.toggleClass = function(names) {
  return this.each(function() {
    return names.split(' ').forEach(function(name) {
      return this.classList.toggle(name);
    }, this);
  });
};

$selector.fn.hasClass = function(name) {
  var ref;
  return (ref = this.get(0)) != null ? ref.classList.contains(name) : void 0;
};

$selector.fn.css = function(name, value) {
  var key;
  if (typeof name === 'string' && value !== void 0) {
    return this.each(function() {
      return this.style[name] = value;
    });
  } else if (typeof name === 'string' && value === void 0) {
    if (this.get() != null) {
      return document.defaultView.getComputedStyle(this.get(), null).getPropertyValue(name);
    } else {
      return null;
    }
  } else if (typeof name === 'object') {
    for (key in name) {
      this.each(function() {
        return this.style[key] = name[key];
      });
    }
    return this;
  }
};

$selector.fn.on = function(events, handler, options) {
  if (events === 'animationend') {
    events = 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend';
  }
  return this.each(function() {
    if (this.addEventListener === void 0) {
      return;
    }
    if (this.$events === void 0) {
      this.$events = {};
    }
    return events.split(' ').forEach(function(eventName) {
      if (this.$events[eventName] === void 0) {
        this.$events[eventName] = {
          binded: false,
          list: []
        };
      }
      if (this.$events[eventName].binded === false) {
        this.addEventListener(eventName, function(event) {
          if (this.$events[eventName] === void 0) {
            return;
          }
          return this.$events[eventName].list.forEach(function(item, index) {
            item.func.call(this, event);
            if (item.once === true) {
              return this.$events[eventName].list.splice(index, 1);
            }
          }, this);
        });
        this.$events[eventName].binded = true;
      }
      return this.$events[eventName].list.push({
        func: handler,
        once: options != null ? options.once : void 0
      });
    }, this);
  });
};

$selector.fn.one = function(events, handler) {
  return this.each(function() {
    return $selector(this).on(events, handler, {
      once: true
    });
  });
};

$selector.fn.off = function(events, handler) {
  return this.each(function() {
    return events.split(' ').forEach(function(eventName) {
      if (this.$events === void 0) {
        return;
      }
      if (this.$events[eventName] === void 0) {
        return;
      }
      if (handler === void 0) {
        this.$events[eventName].list = [];
      }
      return this.$events[eventName].list.forEach(function(item, index) {
        if (handler === item.func) {
          return this.$events[eventName].list.splice(index, 1);
        }
      });
    }, this);
  });
};

$selector.fn.text = function(text) {
  var ref;
  if (text !== void 0) {
    return this.each(function() {
      return this.innerText = text;
    });
  } else {
    return (ref = this.get()) != null ? ref.innerText : void 0;
  }
};

$selector.fn.val = function(value) {
  var ref;
  if (value !== void 0) {
    return this.each(function() {
      return this.value = value;
    });
  } else {
    return (ref = this.get()) != null ? ref.value : void 0;
  }
};

$selector.fn.html = function(html) {
  var ref;
  if (html !== void 0) {
    return this.each(function() {
      return this.innerHTML = html;
    });
  } else {
    return (ref = this.get()) != null ? ref.innerHTML : void 0;
  }
};

$selector.fn.empty = function() {
  return this.each(function() {
    if (this.value !== void 0) {
      this.value = null;
    }
    if (this.innerHTML !== void 0) {
      this.innerHTML = null;
    }
    if (this.innerText !== void 0) {
      return this.innerText = null;
    }
  });
};

$selector.fn.prop = function(name, value) {
  var key, ref;
  if (typeof name === 'string' && value !== void 0) {
    return this.each(function() {
      return this[name] = value;
    });
  } else if (typeof name === 'string' && value === void 0) {
    return (ref = this.get()) != null ? ref[name] : void 0;
  } else if (typeof name === 'object') {
    for (key in name) {
      this.each(function() {
        return this[key] = name[key];
      });
    }
    return this;
  }
};

$selector.fn.data = function(name, value) {
  var key, ref, ref1;
  if (typeof name === 'string' && value !== void 0) {
    return this.each(function() {
      if (this.$data === void 0) {
        this.$data = {};
      }
      return this.$data[name] = value;
    });
  } else if (typeof name === 'string' && value === void 0) {
    return (ref = this.get()) != null ? (ref1 = ref.$data) != null ? ref1[name] : void 0 : void 0;
  } else if (typeof name === 'object') {
    for (key in name) {
      this.each(function() {
        if (this.$data === void 0) {
          this.$data = {};
        }
        return this.$data[key] = name[key];
      });
    }
    return this;
  }
};
